INTOPOST (Q, P)
Suppose Q is an arithmetic expression written in infix notation. This algorithm finds the equivalent postfix expression P.

1. Push "(" onto STACK, and add ")" to the end of Q.
2. Scan Q from left to right and repeat steps 3 to 6 
   for each element of Q until the STACK is empty:
3.	If an operand is encountered, add it to P.
4.	If a left parenthesis is encountered, 
		push it onto STACK.
	[End of If Structure.]
5.	If an operator op is encountered, then:
	     (a) Repeatedly pop from STACK and add to P 
		 each operator ( on the top of STACK ) 
		 which has the same precedence as or
	         higher precedence then op.
	     (b) Add op to STACK.
	[End of If structure. ]
6. 	If a right parenthesis is encountered, then:
	     (a) Repeatedly pop from STACK and add to P 
		 each operator ( on the top of STACK ) 
		 until a left parenthesis is encountered.
	     (b) Remove the left parenthesis. 
		 [Do not add the left parenthesis to P. ]
	[End of If structure.]
    [End of Step 2 loop. ]
7.  Return.

*****************************-----------------*********************

INTOPRE (Q, P)
Suppose Q is an arithmetic expression written in infix notation. 
This algorithm finds the equivalent prefix expression P.
1.	Push ")" onto STACK, and add "(" to the beg of Q.
2.	Scan Q from right to left and repeat steps 3 to 6 
	for each element of Q until the STACK is empty:
3.		If an operand is encountered, add it to P.
4.		If an right parenthesis is encountered, then:
		
	push it onto STACK.
		[End of If Structure.]
5.		If an operator op is encountered, then:
		     (a) Repeatedly pop from STACK and add to P 
			 each operator (on the top of STACK ) 
			 which has the higher precedence then op.
		     (b) Add op to STACK.
	  	[End of If structure. ]
6. 	  	If a left parenthesis is encountered, then:
		     (a) Repeatedly pop from STACK and add to P 
			 each operator ( on the top of STACK ) 
			 until a right parenthesis is encountered.
		     (b) Remove the right parenthesis. 
			[Do not add the right parenthesis to P. ]
	  	[End of If structure.]
	[End of Step 2 loop. ]
7.	Reverse P.
8.	Return.